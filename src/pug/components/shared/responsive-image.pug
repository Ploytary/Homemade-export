//-
  Напоминалка:
  Использует img[srcset, sizes]
  Принимает объект, в котором уточняется атрибут sizes через свойство media,
  путём указания кол-ва картинок на ширину вьпорта и изменение ширины доступного пространства в СУММЕ(гепы, отступы и тд)
  const image = {
    media: [
      {viewport: 320, imageCount: 1, widthOffset: -20},
      {viewport: 768, imageCount: 1, widthOffset: -20},
      {viewport: 1024, imageCount: 4, widthOffset: -40},
      ...,
    ],
    srcset: [
      {path: '@image/content/blog-1-320.jpg', wDescriptor: 320},
      ...,
    ]
  }

//- /**
//-  * @param {options, alt?: string} respImage
//-  * @param {{media, srcset}} respImage.options
//-  * @param {{viewport: number, imageCount: number, widthOffset?: number}[]} myObj.media
//-  * @param {{path: string, wDescriptor: number}[]} myObj.srcset
//-  */

- const layoutInlinePadding = 5; // src/assets/styles/abstracts/_variables.scss $padding-inline

mixin respImage(options, alt = '')
  - const isString = typeof options === 'string';
  - const unit = attributes.unit || 'vw';  // vw cqw cqi

  if isString
    img(src=options alt=alt loading="lazy")&attributes(attributes)
  else 
    -
      const {media, srcset} = options;

      const sortedSrcSet = srcset.sort((a, b) => a.wDescriptor - b.wDescriptor);
      const sortedMedia = media.sort((a, b) => b.viewport - a.viewport);

      const srcsetAtt = sortedSrcSet.map((item) => `${item.path} ${item.wDescriptor}w`).join(',');
      const mediaTemp = media.map((query) => {
        const widthOffset = query.widthOffset ? query.widthOffset >= 0 ? `+ ${Math.abs(query.widthOffset)}px` : `- ${Math.abs(query.widthOffset)}px` : '';
        let size = '';
        if (widthOffset && query.imageCount > 1) {
          size = `calc((${100 - layoutInlinePadding * 2}${unit} ${widthOffset}) / ${query.imageCount})`;
        } else if (widthOffset) {
          size = `calc(${100 - layoutInlinePadding * 2}${unit} ${widthOffset})`;
        } else {
          size = `${100 / query.imageCount}${unit}`;
        }

        return `(min-width: ${query.viewport}px) ${size}`;
      });
      mediaTemp.push(`100${unit}`);
      const mediaAtt = mediaTemp.join(', ');
    img.responsive-img(sizes=mediaAtt src=sortedSrcSet[0].path, alt=alt srcset=srcsetAtt loading="lazy")&attributes(attributes)

//-
  Напоминалка:
  Нужно, когда под разные экраны, нужны разные куски изображения, или абсолютно разные изображения, или разные форматы.
  Использует picture > source[ media, srcset, sizes]

//- /**
//-  * @param {optionSet, alt?: string} respImageSet
//-  * @param {{media, srcset}} respImage.optionSet
//-  * @param {{viewport: number, imageCount: number, widthOffset?: number}} myObj.media
//-  * @param {{path: string, wDescriptor: number}[]} myObj.srcset
//-  */

mixin respImageSet(optionSet, alt = '')
  - optionSet.sort((a, b) => b.media.viewport - a.media.viewport);
  - const unit = attributes.unit || 'vw';  // vw cqw cqi

  picture
    each image in optionSet
      -
        const {media, srcset} = image;
        const sortedSrcSet = srcset.sort((a, b) => a.wDescriptor - b.wDescriptor);
        const srcsetAtt = sortedSrcSet.map((item) => `${item.path} ${item.wDescriptor}w`).join(',');

        const widthOffset = media.widthOffset ? media.widthOffset >= 0 ? `+ ${Math.abs(media.widthOffset)}px` : `- ${Math.abs(media.widthOffset)}px` : '';
        let size = '';
        if (widthOffset && media.imageCount > 1) {
          size = `calc((${100 - layoutInlinePadding * 2}${unit} ${widthOffset}) / ${media.imageCount})`;
        } else if (widthOffset) {
          size = `calc(${100 - layoutInlinePadding * 2}${unit} ${widthOffset})`;
        } else {
          size = `${100 / media.imageCount}${unit}`;
        }

      source(
        media=`(min-width: ${media.viewport}px)`
        srcset=srcsetAtt
        sizes=size
      )
    - const smallestVp = optionSet.sort((a, b) => a.media.viewport - b.media.viewport)[0];
    - const smallestImgPath = smallestVp.srcset.sort((a, b) => a.wDescriptor - b.wDescriptor)[0].path;
    img.responsive-img(src=smallestImgPath, alt=alt sizes=`${100 - layoutInlinePadding * 2}${unit}` loading="lazy")&attributes(attributes)

mixin responsiveImage(image, media, sizesToAdd)
  - const isString = typeof image === 'string';
  - const unit = attributes.unit || 'vw';  // с контейнерными юнитами не медиавыражения не работают

  if isString
    img(src=options alt=alt loading="lazy")&attributes(attributes)
  else 
    -
      const {srcset, alt} = image;

      const sortedSrcSet = srcset.filter((src) => sizesToAdd.includes(src.wDescriptor)).sort((a, b) => a.wDescriptor - b.wDescriptor); 
      const sortedMedia = media.sort((a, b) => b.viewport - a.viewport); /* Порядок медиазапросов важен. Применится первый удовлетворяющий. 
      Поэтому от большего разрешения к меньшему */

      const srcsetAtt = sortedSrcSet.map((item) => `${item.path} ${item.wDescriptor}w`).join(',');
      const mediaTemp = sortedMedia.map((query) => {
        const widthOffset = query.widthOffset ? query.widthOffset >= 0 ? `+ ${Math.abs(query.widthOffset)}px` : `- ${Math.abs(query.widthOffset)}px` : '';
        let size = '';
        if (widthOffset && query.imageCount > 1) {
          size = `calc((${100 - layoutInlinePadding * 2}${unit} ${widthOffset}) / ${query.imageCount})`;
        } else if (widthOffset) {
          size = `calc(${100 - layoutInlinePadding * 2}${unit} ${widthOffset})`;
        } else {
          size = `${100 / query.imageCount}${unit}`;
        }

        return `(min-width: ${query.viewport}px) ${size}`;
      });
      mediaTemp.push(`100${unit}`);
      const mediaAtt = mediaTemp.join(', ');
    img.responsive-img(sizes=mediaAtt src=sortedSrcSet[0].path, alt=alt srcset=srcsetAtt loading="lazy")&attributes(attributes)


