mixin wave-text(text, repeat)
  -
    const {amplitude = 100, length = 100, frequency = 1, curvatureRatio = 1, padding = 0, ...props} = attributes;
    const pathCurveString = new Array(frequency)
      .fill(null)
      .map((iteration, index) => {
        if (index === 0) {
          return `M${padding},${amplitude / 2} Q${length / 4 + padding},${amplitude - amplitude * curvatureRatio + padding} ${length / 2 + padding},${amplitude / 2} T${length + padding},${amplitude / 2}`;
        } else {
          return `T${length * (index + 0.5) + padding},${amplitude / 2} T${length * (index + 1) + padding},${amplitude / 2}`;
        }
      })
      .join(' ');
    const pathID = 'wave-text-' +  Math.round(Math.random() * 9999);

  svg.wave-text(viewBox = `0 0 ${length * frequency + padding * 2} ${amplitude + padding  * 2}`, stroke-width = 1, stroke = 'black', fill = 'none')&attributes(props)
    defs 
      path(id = pathID, d = pathCurveString)
    text(fill = 'black') 
      textPath(xlink:href = `#${pathID}`)= new Array(repeat).fill(null).map(() => text).join(' ')