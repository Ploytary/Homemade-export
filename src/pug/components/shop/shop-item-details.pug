include ./shop-product-data.pug
- locals = require('../../../assets/js/helpers/number');
-
  const dateFormat = {
    en: ['en-US', {month: 'long', year: 'numeric', day: 'numeric'}],
    ru: ['ru-RU', {month: 'long', year: 'numeric', day: 'numeric'}],
  };

  const shopDetailsTextContent = {
    a11lyTitle: {
      en: 'Product details',
      ru: 'Подробности продукта',
    },
    quantityLabel: {
      en: 'Quantity',
      ru: 'Количество',
    },
    cartButton: {
        en: 'Add to cart',
        ru: 'В корзину',
    },
    tabs: {
      desciption: {
        en: 'Description',
        ru: 'Описание',
      },
      information: {
        en: 'Additional information',
        ru: 'Дополнительная информация',
      },
      reviews: {
        en: 'Rewiews',
        ru: 'Обзоры',
      },
    },
    conjunction: {
      en: 'by',
      ru: 'от'
    }
  };
  const exampleItem = shopProductData[6];

  const viewerViewportMedia = [
    {viewport: 380, imageCount: 1, widthOffset: 0},
  ];
  const viewerThumbsMedia = [
    {viewport: 380, imageCount: 4, widthOffset: -30},
    {viewport: 768, imageCount: 8, widthOffset: -60},
    {viewport: 1024, imageCount: 8, widthOffset: -85},
  ];

  const viewerViewportSizesToAdd = [340, 450, 560];
  const viewerThumbsSizesToAdd = [78, 120];

section.section.shop-item-details.full-width
  h2.section__title.visually-hidden= shopDetailsTextContent.a11lyTitle[lang]
  .shop-item-details__columns 
    .shop-item-details__image-viewer.image-viewer
      - const pictures = [exampleItem.image, ...exampleItem.restImages];
      .image-viewer__viewport.swiper
        ul.swiper-wrapper
          each picture in pictures
            - const link = require(picture.srcset[0].path);
            li.swiper-slide
              a.image-viewer__expand(href=link data-pswp-width="1000" data-pswp-height="1000"  target="_blank")
                +responsiveImage(picture, viewerViewportMedia, viewerViewportSizesToAdd)
      .image-viewer__thrumbs.swiper
        ul.swiper-wrapper
          each picture in pictures
            li.swiper-slide
              +responsiveImage(picture, viewerThumbsMedia, viewerThumbsSizesToAdd)
    .shop-item-details__content 
        h3.shop-item-details__product-title= exampleItem.name[lang]
        .shop-item-details__row 
          +ratingOutput(4)
          - const reviewCount = exampleItem.reviews.length;
          a.shop-item-details__product-reviews-count(href='#tabs')= `${reviewCount} review${reviewCount > 1 && 's'}`
        p.shop-item-details__price
          - const priceRate = lang === 'ru' ? USDtoRUBRate : 1;
          if exampleItem.currentPrice === exampleItem.basePrice
            span.shop-item-details__current-price= locals.formatWithFractions((exampleItem.currentPrice * priceRate)) + currencySymbol[lang]
          else
            span.shop-item-details__old-price= locals.formatWithFractions((exampleItem.basePrice * priceRate)) + currencySymbol[lang]
            span.shop-item-details__current-price= locals.formatWithFractions((exampleItem.currentPrice * priceRate)) + currencySymbol[lang]
        p.shop-item-details__description= exampleItem.details[lang]
        dl.shop-item-details__meta-list
          each meta in exampleItem.primaryMeta
            .shop-item-details__meta-item
              dt.shop-item-details__meta-item-term= meta.term[lang] + ':'
              dd.shop-item-details__meta-item-description= meta.description[lang]
        .shop-item-details__controls
          p.shop-item-details__meta-item-term= shopDetailsTextContent.quantityLabel[lang] + ':'
            span.counter 
              button.counter__button.counter__button--decrease
                span.counter__button-label.visually-hidden decrease
                +sprite('arrow', 'counter__button-icon')
              span.counter__value 1
              button.counter__button.counter__button--increase
                span.counter__button-label.visually-hidden increase
                +sprite('arrow', 'counter__button-icon')
          +main-button-cart(shopDetailsTextContent.cartButton[lang])(class='shop-item-details__buy-button')
        dl.shop-item-details__secondary-meta-list
          - const mergedMeta = [...exampleItem.secondaryMeta, {term: {en: 'Category', ru: 'Категория'}, description: exampleItem.category}];
          each meta in mergedMeta
            .shop-item-details__meta-item
              dt.shop-item-details__meta-item-term= meta.term[lang] + ':'
              case typeof meta.description
                when 'string'
                  dd.shop-item-details__meta-item-description= meta.description
                default
                  dd.shop-item-details__meta-item-description= meta.description.map((item) => item[lang]).join(', ')
  .shop-item-details__tabs.tabs(id="tabs")
    .tabs__headline
      .tabs__triggers-list
        button.tabs__item-trigger.tabs__item-show-trigger--active(type='button', data-trigger-id=0)= shopDetailsTextContent.tabs.desciption[lang]
        button.tabs__item-trigger(type='button', data-trigger-id=1)= shopDetailsTextContent.tabs.information[lang]
        button.tabs__item-trigger(type='button', data-trigger-id=2)= shopDetailsTextContent.tabs.reviews[lang] + `(${exampleItem.reviews.length})`
      .tabs__triggers-float-decor 
        .tabs__triggers-decor-element
    ul.tabs__content-view
      li.tabs__item-content
        each paragraph in exampleItem.description
          p.tabs__description= paragraph[lang]
      li.tabs__item-content
        dl.tabs__props-list
          each item in exampleItem.properties
            .tabs__props-item
              dt.tabs__term= item.term[lang]
              dd.tabs__props-description= item.description[lang]
      li.tabs__item-content
        each review in exampleItem.reviews
          .user-review 
            img.user-review__avatar(src=review.author.avatar, alt=review.author.alt[lang])
            p.user-review__name!= `${shopDetailsTextContent.conjunction[lang]} <b>${review.author.name[lang]}</b> / `
              time(datetime = review.date)= review.date.toLocaleDateString(...dateFormat[lang])
            +ratingOutput(review.rating)(class = 'user-review__rating')
            p.user-review__comment= review.comment[lang]
        include ./review-form.pug

