@use 'sass:list';
@use '../../abstracts';

$button-size: 40px;
$icon-size: 24px;
$icon-elements-width: 20px;
$icon-elements-height: $icon-elements-width * 0.8;
$color: white;
$stroke-width: 2px;
$animation-duration: 0.3s;
$animation-easing: ease;
$stages-ratio-list: 0.4 0.6;


.burger-button {
  --animation-duration: #{$animation-duration};
  --animation-easing-function: #{$animation-easing};
  padding: calc(($button-size - $icon-size) / 2);
  background-color: transparent;
  cursor: pointer;

  &__icon {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: $icon-elements-width;
    height: $icon-elements-height;
    margin-inline: calc(($icon-size - $icon-elements-width) / 2);
    margin-block: calc(($icon-size - $icon-elements-height) / 2);

    span {
      display: block;
      width: 100%;
      height: $stroke-width;
      background-color: $color;
    }
  }
}

.burger-button--modern-animation {
  span {
    transition: calc(var(--animation-duration) * list.nth($stages-ratio-list, 1)) var(--animation-easing-function);
    transition-property: opacity, transform;
  }

  &.burger-button--opened .burger-button__icon {
    span:nth-child(1) {
      animation: move-top-beam var(--animation-duration) var(--animation-easing-function) both;
      animation-play-state: running;
    }

    span:nth-child(2) {
      opacity: 0;
      transform: scale(0);
    }

    span:nth-child(3) {
      animation: move-bottom-beam var(--animation-duration) var(--animation-easing-function) both;
      animation-play-state: running;
    }
  }
  
  &.burger-button--closed .burger-button__icon {
    span:nth-child(1) {
      animation: move-top-beam-reverse var(--animation-duration) var(--animation-easing-function) both reverse;
      animation-play-state: running;
    }

    span:nth-child(2) {
      opacity: 1;
      transform: scale(1);
      transition-delay: calc(var(--animation-duration) * list.nth($stages-ratio-list, 2));
    }

    span:nth-child(3) {
      animation: move-bottom-beam-reverse var(--animation-duration) var(--animation-easing-function) both reverse;
      animation-play-state: running;
    }
  } 
}

@keyframes move-top-beam {
  $direction: 1;

  #{abstracts.get-animation-key(1, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2));
  }

  #{abstracts.get-animation-key(2, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2)) rotate($direction * 45deg);
  }
}

@keyframes move-top-beam-reverse {
  $direction: 1;

  #{abstracts.get-animation-key(1, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2));
  }

  #{abstracts.get-animation-key(2, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2)) rotate($direction * 45deg);
  }
}

@keyframes move-bottom-beam {
  $direction: -1;

  #{abstracts.get-animation-key(1, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2));
  }

  #{abstracts.get-animation-key(2, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2)) rotate(135deg);
  }
}

@keyframes move-bottom-beam-reverse {
  $direction: -1;

  #{abstracts.get-animation-key(1, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2));
  }

  #{abstracts.get-animation-key(2, $stages-ratio-list)} {
    transform: translateY($direction * calc($icon-elements-height / 2 - $stroke-width / 2)) rotate(135deg);
  }
}

