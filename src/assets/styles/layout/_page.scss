@use '../abstracts/variables' as variables;

html {
  height: 100%;
}

main {
  flex-grow: 1;
}

body {
  display: flex;
  flex-direction: column;

  main, footer {
    container-type: inline-size;
  }
}

.content-grid {
  --layout-min-width: #{variables.$content-min-width};
  --padding-inline: #{variables.$padding-inline};
  --content-max-width: #{variables.$content-max-width};
  --breakout-max-width: #{variables.$breakout-max-width};
  --content-min-width: calc(var(--layout-min-width) - var(--padding-inline) * 2);
  --responsive-inline-width: minmax(var(--padding-inline), 1fr);
  --responsive-content-width: max(var(--content-min-width), min(var(--content-max-width), calc(100% - var(--padding-inline) * 2)));
  --responsive-breakout-width: minmax(0, calc((var(--breakout-max-width) - var(--content-max-width)) / 2));

  display: grid;
  grid-template-columns: [full-width-start] var(--responsive-inline-width) [breakout-start] var(--responsive-breakout-width) [content-start] var(--responsive-content-width) [content-end] var(--responsive-breakout-width) [breakout-end] var(--responsive-inline-width) [full-width-end];
}

.content-grid > :not(.breakout, .full-width),
.full-width > :not(.breakout, .full-width) {
  grid-column: content;
}

.breakout {
  grid-column: breakout;

  display: grid;
  grid-template-columns: inherit;
}

.full-width {
  grid-column: full-width;

  display: grid;
  grid-template-columns: inherit;
}

.content-grid-cancel {
  display: block;
  grid-template-columns: auto;
}